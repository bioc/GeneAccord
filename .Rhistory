sessionInfo()
getwd()
devtools::build()
library(digest)
# digest::digest
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"),
serializeVersion = .getSerializeVersion())
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE, version = serializeVersion)
else base::serialize(object, connection = NULL, ascii = ascii,
version = serializeVersion)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
# now it should work
devtools::check()
devtools::use_vignette("GeneAccord")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>"
)
install.packages("devtools")
# to install its dependencies
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
library(devtools)
install_github("cbg-ethz/GeneAccord")
library(GeneAccord)
install.packages("devtools")
citation("caTools")
citation("dplyr")
citation("ggplot2")
citation("graphics")
citation("grDevices")
citation("gTools")
citation("ggPubr")
citation("gtools")
citation("ggpubr")
citation("magrittr")
citation("maxLik")
citation("RColorBrewer")
citation("reshape2")
citation("stats")
citation("tibble")
citation("utils")
citation("dplyr")
citation("ComplexHeatmap")
citation("survival")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>"
)
install.packages("devtools")
# to install its dependencies
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
library(devtools)
install_github("cbg-ethz/GeneAccord")
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
install.packages(c("biomaRt", "caTools", "dplyr", "ggplot2", "graphics", "grDevices", "gtools", "ggpubr", "magrittr", "maxLik", "RColorBrewer", "reshape2", "stats", "tibble", "utils"))
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>"
)
library(GeneAccord)
getwd)_
getwd()
setwd("U:/Research/github/GeneAccord")
getwd()
setwd("U:/Research/github/GeneAccord/")
getwd()
devtools::build(vignettes = TRUE, manual = TRUE)
?p.adjust
3000000000
3000000
devtools::build()
devtools::build()
devtools::check()
because of the error when trying to devtools::check()
# "Error: The specified file is not readable: U:\Research\R\myP\GeneAccord\man/all_genes_tbl.Rd"
# now that I have the R package on the U drive
# following the suggestion from: https://stackoverflow.com/questions/40530968/overwriting-namespace-and-rd-with-roxygen2
# "The roxygen2 package depends on the digest package. The error (The specified file is not readable) is generated by the digest function of the digest package, at the moment when this function calls the file.access function: "
# "That means that U:/Data has not the read permission. But this is not true: it has the read permission. The problem is that my U: drive is a "network drive", and there are some issues with the file.access function for network drives, as we can see here for example: "
# "https://github.com/eddelbuettel/digest/issues/13"
# "The problem would be solved if R.utils::fileAccess would be used instead of file.access in the digest::digest function."
library(digest)
# digest::digest
mydigest <- function (object, algo = c("md5", "sha1", "crc32", "sha256",
"sha512", "xxhash32", "xxhash64", "murmur32"), serialize = TRUE,
file = FALSE, length = Inf, skip = "auto", ascii = FALSE,
raw = FALSE, seed = 0, errormode = c("stop", "warn", "silent"),
serializeVersion = .getSerializeVersion())
{
file.access <- R.utils::fileAccess
algo <- match.arg(algo)
errormode <- match.arg(errormode)
.errorhandler <- function(txt, obj = "", mode = "stop") {
if (mode == "stop") {
stop(txt, obj, call. = FALSE)
}
else if (mode == "warn") {
warning(txt, obj, call. = FALSE)
return(invisible(NA))
}
else {
return(invisible(NULL))
}
}
if (is.infinite(length)) {
length <- -1
}
if (is.character(file) && missing(object)) {
object <- file
file <- TRUE
}
if (serialize && !file) {
object <- if ("nosharing" %in% names(formals(base::serialize)))
base::serialize(object, connection = NULL, ascii = ascii,
nosharing = TRUE, version = serializeVersion)
else base::serialize(object, connection = NULL, ascii = ascii,
version = serializeVersion)
if (any(!is.na(pmatch(skip, "auto")))) {
if (ascii) {
skip <- which(object[1:30] == as.raw(10))[4]
}
else {
skip <- 14
}
}
}
else if (!is.character(object) && !inherits(object, "raw")) {
return(.errorhandler(paste("Argument object must be of type character",
"or raw vector if serialize is FALSE"), mode = errormode))
}
if (file && !is.character(object))
return(.errorhandler("file=TRUE can only be used with a character object",
mode = errormode))
algoint <- switch(algo, md5 = 1, sha1 = 2, crc32 = 3, sha256 = 4,
sha512 = 5, xxhash32 = 6, xxhash64 = 7, murmur32 = 8)
if (file) {
algoint <- algoint + 100
object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
# now it should work
?devtools::build()
devtools::check()
print(head(read.csv(input_files_01[1])))
getwd()
devtools::build()
devtools::check()
devtools::Bioccheck()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
devtools::BiocC\heck()
devtools::BiocCheck()
BiocCheck()
library(BiocCheck)
BiocCheck()
BiocCheck("GeneAccord")
setwd("U:/Research/github/")
getwd()
BiocCheck("GeneAccord")
BiocCheck("GeneAccord")
BiocCheck("GeneAccord")
devtools::build()
getwd()
setwd("U:/Research/github/GeneAccord/")
getwd()
devtools::build()
devtools::check(build_args = "--no-build-vignettes")
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::check(build_args = "--no-build-vignettes")
devtools::check(build_args = "--no-build-vignettes")
devtools::check(build_args = "--no-build-vignettes")
devtools::check(build_args = "--no-build-vignettes")
getwd)_
getwd()
setwd("U:/Research/github/")
BiocCheck("GeneAccord")
BiocCheck("GeneAccord")
devtools::install(build_vignettes = TRUE)
getwd()
setwd("U:/Research/github/GeneAccord/")
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::check()
devtools::install(build_vignettes = TRUE)
getwd()
getwd("U:/Research/github/")
setwd("U:/Research/github/")
getwd()
BiocCheck()
BiocCheck("GeneAccord")
getwd()
setwd("U:/Research/github/GeneAccord/")
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install(build_vignettes = TRUE)
