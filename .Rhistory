object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
# now it should work
devtools::check()
warnings()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
package_dir <- "U:/Research/R/myP/GeneAccordForBioconductor/GeneAccord/"
for (file in list.files(paste0(package_dir, "/R"), full.names = T)) {source(file)}
library(magrittr)
library(dplyr)
load(paste0(package_dir, "/data/clone_tbl_all_pats_all_trees.RData"))
load(paste0(package_dir, "/data/avg_rates_m.RData"))
load(paste0(package_dir, "/data/list_of_num_trees_all_pats.RData"))
load(paste0(package_dir, "/data/list_of_clon_excl_all_pats.RData"))
load(paste0(package_dir, "/data/ecdf_list.RData"))
load(paste0(package_dir, "/data/ensg_reactome_path_map.RData"))
ext_data_dir <- paste0(package_dir, "inst/extdata/")
# set the patient id
pat_id <- "01"
# find all csv-files from patient 01, which are in the clonal_genotypes subdirectory, with seeds 5, 10, 15, ..., 100
input_files_01 <- paste(ext_data_dir, "/clonal_genotypes/cloe_seed", seq(5, 100, by = 5), "/", pat_id, ".csv", sep = "")
# this tells GeneAccord that both cases should be tested:
# pairs that tend to co-occur together in the same clone more often than expected,
# and pairs that tend to be clonally exclusive.
alternative <- "two.sided"
# to limit the number of tests done, the genes that should be
# tested can be pre-specified
# here, the genes VHL, PXDN
genes_of_interest <- c("ENSG00000134086", "ENSG00000130508")
# this tells GeneAccord that we only want to test pairs where both gene A AND gene B
# are from the 'genes of interest'
AND_OR <- "AND"
# run GeneAccord with these options
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
AND_OR <- "OR"
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only VHL
genes_of_interest <- c("ENSG00000134086")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
res_pairs_ts %>% select(num_patients) %>% group_by(num_patients) %>% tally()
hgnc_to_ensembl("TP53")
all_genes_tbl <- create_ensembl_gene_tbl_hg()
all_genes_tbl
hgnc_to_ensembl("TP53", all_genes_tbl)
AND_OR <- "OR"
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000141510")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
hgnc_to_ensembl("BAP1", all_genes_tbl)
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000163930")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
hgnc_to_ensembl("MTOR1", all_genes_tbl)
hgnc_to_ensembl("MTOR", all_genes_tbl)
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000198793")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
hgnc_to_ensembl("PTEN", all_genes_tbl)
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000171862")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
hgnc_to_ensembl("KDM5C", all_genes_tbl)
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000126012")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only TP53
genes_of_interest <- c("ENSG00000134086")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
res_pairs_ts %>% filter(num_patients <= 3)
res_pairs_ts %>% filter(num_patients <= 3) %>% filter(pval < 0.2)
res_pairs_ts %>% filter(num_patients <= 3) %>% filter(pval < 0.1)
ensembl_to_hgnc("ENSG00000075856", all_genes_tbl)
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only SART3
genes_of_interest <- c("ENSG00000075856")
# run GeneAccord testing all pairs that include the gene VHL
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
ensembl_to_hgnc("ENSG00000181143", all_genes_tbl)
genes_of_interest <- c("ENSG00000181143")
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
res_pairs_ts %>% filter(pval < 0.1)
map_pairs_to_hgnc_symbols(res_pairs_ts, all_genes_tbl)
package_dir <- "U:/Research/R/myP/GeneAccordForBioconductor/GeneAccord/"
for (file in list.files(paste0(package_dir, "/R"), full.names = T)) {source(file)}
library(magrittr)
library(dplyr)
load(paste0(package_dir, "/data/clone_tbl_all_pats_all_trees.RData"))
load(paste0(package_dir, "/data/avg_rates_m.RData"))
load(paste0(package_dir, "/data/list_of_num_trees_all_pats.RData"))
load(paste0(package_dir, "/data/list_of_clon_excl_all_pats.RData"))
load(paste0(package_dir, "/data/ecdf_list.RData"))
load(paste0(package_dir, "/data/ensg_reactome_path_map.RData"))
ext_data_dir <- paste0(package_dir, "inst/extdata/")
# set the patient id
pat_id <- "01"
# find all csv-files from patient 01, which are in the clonal_genotypes subdirectory, with seeds 5, 10, 15, ..., 100
input_files_01 <- paste(ext_data_dir, "/clonal_genotypes/cloe_seed", seq(5, 100, by = 5), "/", pat_id, ".csv", sep = "")
# defines the path to the external data directory
ext_data_dir <- system.file('extdata', package = 'GeneAccord')
# set the patient id
pat_id <- "01"
# find all csv-files from patient 01, which are in the clonal_genotypes subdirectory, with seeds 5, 10, 15, ..., 100
input_files_01 <- paste(ext_data_dir, "/clonal_genotypes/cloe_seed", seq(5, 100, by = 5), "/", pat_id, ".csv", sep = "")
# this is now a vector with all 20 csv-files for this patient
head(input_files_01)
package_dir <- "U:/Research/R/myP/GeneAccordForBioconductor/GeneAccord/"
for (file in list.files(paste0(package_dir, "/R"), full.names = T)) {source(file)}
library(magrittr)
library(dplyr)
load(paste0(package_dir, "/data/clone_tbl_all_pats_all_trees.RData"))
load(paste0(package_dir, "/data/avg_rates_m.RData"))
load(paste0(package_dir, "/data/list_of_num_trees_all_pats.RData"))
load(paste0(package_dir, "/data/list_of_clon_excl_all_pats.RData"))
load(paste0(package_dir, "/data/ecdf_list.RData"))
load(paste0(package_dir, "/data/ensg_reactome_path_map.RData"))
ext_data_dir <- paste0(package_dir, "inst/extdata/")
# set the patient id
pat_id <- "01"
# find all csv-files from patient 01, which are in the clonal_genotypes subdirectory, with seeds 5, 10, 15, ..., 100
input_files_01 <- paste(ext_data_dir, "/clonal_genotypes/cloe_seed", seq(5, 100, by = 5), "/", pat_id, ".csv", sep = "")
head(read.csv(input_files_01[1]))
clone_tbl_01_all_trees <- create_tbl_tree_collection(input_files_01)
clone_tbl_01_all_trees
# print all 20 tree id's
unique(as.character(clone_tbl_01_all_trees$tree_id))
rates_clon_excl_01 <- compute_rates_clon_excl(clone_tbl_01_all_trees)
rates_clon_excl_01
# average rate for patient 01 across trees
m_01 <- mean(rates_clon_excl_01)
# compute the histogram of how often gene pairs occur in the trees, and how often they are clonally exclusive
hist_of_num_trees_clon_excl_01 <- get_hist_clon_excl(clone_tbl_01_all_trees)
# load the data as generated in step 1 from all 82 patients
data("clone_tbl_all_pats_all_trees")
data("avg_rates_m")
data("list_of_num_trees_all_pats")
data("list_of_clon_excl_all_pats")
# the tibble containing the gene-to-clone assignments from all patients and the whole collection of trees
print(clone_tbl_all_pats_all_trees)
# the average rates of clonal exclusivity from each patient
print(avg_rates_m)
# the histograms of how often pairs were mutated across the collection of trees
head(list_of_num_trees_all_pats, n = 2)
# the histograms of how often pairs were clonally exclusive across the collection of trees
head(list_of_clon_excl_all_pats, n = 2)
pairs_in_patients_hist(clone_tbl_all_pats_all_trees)
num_pat_pair_max <- 3
set.seed(1234)
ecdf_list <- generate_ecdf_test_stat(avg_rates_m, list_of_num_trees_all_pats, list_of_clon_excl_all_pats, num_pat_pair_max, num_pairs_sim = 1000)
load(paste0(package_dir, "/data/ecdf_list.RData"))
load(paste0(package_dir, "/data/ensg_reactome_path_map.RData"))
# perform the clonal exclusivity test
res_pairs <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list)
library(magrittr)
# extract all pairs with an adjusted p-value less than 0.05
sig_pairs <- res_pairs %>% filter(qval < 0.05)
# print the top pairs
sig_pairs[order(sig_pairs$pval),]
# this will create a tibble with ensembl gene id's and corresponding hgnc gene symbols of the human genes
all_genes_tbl <- create_ensembl_gene_tbl_hg()
# get the hgnc symbols of the significant pairs
sig_pairs <- map_pairs_to_hgnc_symbols(sig_pairs, all_genes_tbl)
# print the top pairs
sig_pairs[order(sig_pairs$pval),]
# find out in which patients they occur and are clonally exclusive
sig_pairs <- take_pairs_and_get_patients(clone_tbl_all_pats_all_trees, sig_pairs)
# print the top pairs
sig_pairs[order(sig_pairs$pval),]
# define output file
sig_pairs_tsv <- "GeneAccord_sig_pairs.tsv"
# save the results into the tsv-file
write_res_pairs_to_disk(sig_pairs, avg_rates_m, sig_pairs_tsv)
# plot the ECDF of the test statistic under the null
plot_ecdf_test_stat(ecdf_list)
plot_ecdf_test_stat <- function(ecdf_list, plot_idx = c(2,3), num_panel_rows = 1, output_pdf = "direct"){
stopifnot(is.list(ecdf_list))
stopifnot(is.numeric(plot_idx))
stopifnot(is.numeric(num_panel_rows))
stopifnot(is.character(output_pdf))
num_ecdfs <- length(ecdf_list)
stopifnot(max(plot_idx) <= num_ecdfs)
num_ecdfs_to_plot <- length(plot_idx)
# the first list entry is just set to NULL!
real_num_ecdfs <- num_ecdfs-1
message(paste("Found ", num_ecdfs_to_plot, " ECDF's to plot.", sep = ""))
stopifnot(num_panel_rows <= num_ecdfs_to_plot)
stopifnot(num_panel_rows > 0)
# plot the ecdf's
num_panel_cols <- ceiling(num_ecdfs_to_plot/num_panel_rows)
# make sure it is an integer
if( num_panel_cols != round(num_panel_cols, digits = 0) || num_panel_rows != round(num_panel_rows, digits = 0) ||
(num_panel_rows*num_panel_cols < num_ecdfs_to_plot)){
stop("The number of rows and columns for the panels needs to be integers and need to multiply to a number which is greater or equal to the number of ECDF's to plot!")
}
if(output_pdf != "direct"){
this_height = num_panel_rows*4
this_width = (num_panel_cols/num_panel_rows)*this_height
pdf(output_pdf, height = this_height, width = this_width)
}
# set the number of panel rows and columns
par(mfrow = c(num_panel_rows, num_panel_cols))
# plot ecdf's
for (i in plot_idx){
if(i == 1){ # the first ecdf is just NULL
if(is.null(ecdf_list[[i]])){
stop(paste0("Cannot plot the first ECDF of the list because by default, it is set to NULL."))
}
}
this_ecdf <- ecdf_list[[i]]
graphics::plot(this_ecdf, main = paste("ECDF (Number of patients a pair is mutated in = ", i,")", sep = ""))
grid()
}
if(output_pdf != "direct"){
dev.off()
stopifnot(file.exists(output_pdf))
}
}
# plot the ECDF of the test statistic under the null
plot_ecdf_test_stat(ecdf_list)
# plot the ECDF of the test statistic under the null
plot_ecdf_test_stat(ecdf_list)
library(dplyr)
res_pairs %>% select(num_patients) %>% group_by(num_patients) %>% tally()
plot_rates_clon_excl(avg_rates_m, clone_tbl_all_pats_all_trees)
clone_tbl<-clone_tbl_all_pats_all_trees
stopifnot(is.numeric(avg_rates_m))
stopifnot(dplyr::is.tbl(clone_tbl))
stopifnot("tree_id" %in% colnames(clone_tbl))
stopifnot(is.character(output_pdf))
# find out the average number of clones
all_tree_ids <- unique(as.character(clone_tbl$tree_id))
num_trees <- length(all_tree_ids)
num_pats <- length(unique(as.character(clone_tbl$patient_id)))
stopifnot(num_pats == length(avg_rates_m))
# message to user
message(paste("There are rates from ", num_pats, " patients.", sep = ""))
all_trees_num_clones <- c(rep(0, num_pats))
for (this_tree in all_tree_ids){
clone_tbl_this_tree <- clone_tbl %>% dplyr::filter(tree_id == this_tree) %>% dplyr::select(-tree_id)
this_tree_num_clones <- suppressMessages(extract_num_clones_tbl(clone_tbl_this_tree)) # this counts the number of clones that have at least one
# gene assigned to it
all_trees_num_clones <- all_trees_num_clones + this_tree_num_clones
}
all_trees_avg_num_clones <- all_trees_num_clones/num_trees
# put it into the right ordering
avgNumClones <- all_trees_avg_num_clones[order(match(names(all_trees_avg_num_clones), names(avg_rates_m)))]
stopifnot(is.numeric(avgNumClones))
# extract patient id's and make sure that avg_rates_m and avgNumClones are in the same order
pat_ids_rates <- names(avg_rates_m)
pat_ids_clones <- names(avgNumClones)
stopifnot(is.character(pat_ids_rates))
stopifnot(length(setdiff(pat_ids_rates, pat_ids_clones)) == 0)
avgNumClones <- avgNumClones[match(pat_ids_rates, pat_ids_clones)]
pat_ids_clones <- pat_ids_clones[match(pat_ids_rates, pat_ids_clones)]
myOrder <- order(nchar(pat_ids_rates), pat_ids_rates)
rates_and_clones_tbl <- tibble::tibble(pat_ids_r = pat_ids_rates[myOrder],
pat_ids_c = pat_ids_clones[myOrder],
rates_m = avg_rates_m[myOrder],
num_c = avgNumClones[myOrder]) %>%
dplyr::filter(pat_ids_r == pat_ids_c)
stopifnot(dim(rates_and_clones_tbl)[1] == num_pats)
# message to user
message(paste("The average rate of clonal exclusivity is between ", round(min(avg_rates_m), digits = 2),
"-", round(max(avg_rates_m), digits = 2), sep = ""))
# this is to set the order among the ggplot bars
rates_and_clones_tbl$pat_ids_r <- factor(rates_and_clones_tbl$pat_ids_r, levels = rev(rates_and_clones_tbl$pat_ids_r))
rates_and_clones_tbl$pat_ids_c <- factor(rates_and_clones_tbl$pat_ids_c, levels = rev(rates_and_clones_tbl$pat_ids_c))
this_plot <- ggplot2::ggplot(rates_and_clones_tbl, ggplot2::aes(x = pat_ids_r, y = rates_m, fill = num_c)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::ggtitle("Mean rates of clonal exclusivity in each patient") +
ggplot2::ylab("Rate m") +
ggplot2::xlab("Patients") +
ggplot2::scale_fill_gradient(low="lightblue", high="darkblue", guide = "colourbar") +
ggplot2::guides(fill=ggplot2::guide_colourbar(title="Average number of clones")) +
ggplot2::coord_flip()
print(this_plot)
library(ggplot2))
library(ggplot2)
this_plot <- ggplot2::ggplot(rates_and_clones_tbl, ggplot2::aes(x = pat_ids_r, y = rates_m, fill = num_c)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::ggtitle("Mean rates of clonal exclusivity in each patient") +
ggplot2::ylab("Rate m") +
ggplot2::xlab("Patients") +
ggplot2::scale_fill_gradient(low="lightblue", high="darkblue", guide = "colourbar") +
ggplot2::guides(fill=ggplot2::guide_colourbar(title="Average number of clones")) +
ggplot2::coord_flip()
print(this_plot)
this_plot <- ggplot2::ggplot(rates_and_clones_tbl, ggplot2::aes(x = pat_ids_r, y = rates_m, fill = num_c)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::ggtitle("Mean rates of clonal exclusivity in each patient") +
ggplot2::ylab("Rate m") +
ggplot2::xlab("Patients") +
ggplot2::scale_fill_gradient(low="lightblue", high="darkblue", guide = "colourbar") +
ggplot2::guides(fill=ggplot2::guide_colourbar(title="Average number of clones")) +
ggplot2::coord_flip() +
ggplot2::grid()
this_plot <- ggplot2::ggplot(rates_and_clones_tbl, ggplot2::aes(x = pat_ids_r, y = rates_m, fill = num_c)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::ggtitle("Mean rates of clonal exclusivity in each patient") +
ggplot2::ylab("Rate m") +
ggplot2::xlab("Patients") +
ggplot2::scale_fill_gradient(low="lightblue", high="darkblue", guide = "colourbar") +
ggplot2::guides(fill=ggplot2::guide_colourbar(title="Average number of clones")) +
ggplot2::coord_flip() +
ggplot2::theme_gray()
print(this_plot)
?ggtitle
plot_rates_clon_excl <- function(avg_rates_m, clone_tbl, output_pdf = "direct") {
tree_id <- pat_ids_c <- rates_m <- num_c <- pat_ids_r <- NULL
stopifnot(is.numeric(avg_rates_m))
stopifnot(dplyr::is.tbl(clone_tbl))
stopifnot("tree_id" %in% colnames(clone_tbl))
stopifnot(is.character(output_pdf))
# find out the average number of clones
all_tree_ids <- unique(as.character(clone_tbl$tree_id))
num_trees <- length(all_tree_ids)
num_pats <- length(unique(as.character(clone_tbl$patient_id)))
stopifnot(num_pats == length(avg_rates_m))
# message to user
message(paste("There are rates from ", num_pats, " patients.", sep = ""))
all_trees_num_clones <- c(rep(0, num_pats))
for (this_tree in all_tree_ids){
clone_tbl_this_tree <- clone_tbl %>% dplyr::filter(tree_id == this_tree) %>% dplyr::select(-tree_id)
this_tree_num_clones <- suppressMessages(extract_num_clones_tbl(clone_tbl_this_tree)) # this counts the number of clones that have at least one
# gene assigned to it
all_trees_num_clones <- all_trees_num_clones + this_tree_num_clones
}
all_trees_avg_num_clones <- all_trees_num_clones/num_trees
# put it into the right ordering
avgNumClones <- all_trees_avg_num_clones[order(match(names(all_trees_avg_num_clones), names(avg_rates_m)))]
stopifnot(is.numeric(avgNumClones))
# extract patient id's and make sure that avg_rates_m and avgNumClones are in the same order
pat_ids_rates <- names(avg_rates_m)
pat_ids_clones <- names(avgNumClones)
stopifnot(is.character(pat_ids_rates))
stopifnot(length(setdiff(pat_ids_rates, pat_ids_clones)) == 0)
avgNumClones <- avgNumClones[match(pat_ids_rates, pat_ids_clones)]
pat_ids_clones <- pat_ids_clones[match(pat_ids_rates, pat_ids_clones)]
myOrder <- order(nchar(pat_ids_rates), pat_ids_rates)
rates_and_clones_tbl <- tibble::tibble(pat_ids_r = pat_ids_rates[myOrder],
pat_ids_c = pat_ids_clones[myOrder],
rates_m = avg_rates_m[myOrder],
num_c = avgNumClones[myOrder]) %>%
dplyr::filter(pat_ids_r == pat_ids_c)
stopifnot(dim(rates_and_clones_tbl)[1] == num_pats)
# message to user
message(paste("The average rate of clonal exclusivity is between ", round(min(avg_rates_m), digits = 2),
"-", round(max(avg_rates_m), digits = 2), sep = ""))
# this is to set the order among the ggplot bars
rates_and_clones_tbl$pat_ids_r <- factor(rates_and_clones_tbl$pat_ids_r, levels = rev(rates_and_clones_tbl$pat_ids_r))
rates_and_clones_tbl$pat_ids_c <- factor(rates_and_clones_tbl$pat_ids_c, levels = rev(rates_and_clones_tbl$pat_ids_c))
if(output_pdf != "direct")
pdf(output_pdf, height = 10, width = 5)
this_plot <- ggplot2::ggplot(rates_and_clones_tbl, ggplot2::aes(x = pat_ids_r, y = rates_m, fill = num_c)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::ggtitle("Mean rates of clonal exclusivity in each patient") +
ggplot2::ylab("Rate m") +
ggplot2::xlab("Patients") +
ggplot2::scale_fill_gradient(low="lightblue", high="darkblue", guide = "colourbar") +
ggplot2::guides(fill=ggplot2::guide_colourbar(title="Average number of clones")) +
ggplot2::coord_flip() +
ggplot2::theme_gray()
print(this_plot)
if(output_pdf != "direct"){
dev.off()
stopifnot(file.exists(output_pdf))
}
}
plot_rates_clon_excl(avg_rates_m, clone_tbl_all_pats_all_trees)
plot_rates_clon_excl(avg_rates_m, clone_tbl_all_pats_all_trees)
# extract the patient id's in which the pairs are mutated
pairs_of_interest <- sig_pairs %>% filter(qval < 0.02)
pat_ids_of_interest <- unique(unlist(strsplit(as.character(pairs_of_interest$mutated_in), ";")))
# from the gene-to-clone tibble extract the data for one tree
this_tree_id <- 1
clone_tbl_all_pats_tree1 <- clone_tbl_all_pats_all_trees %>%
filter(tree_id == this_tree_id, patient_id %in% pat_ids_of_interest) %>%
select(-tree_id)
# plot the heatmap of clones and genes for the patients and genes of interest
heatmap_clones_gene_pat(pairs_of_interest, clone_tbl_all_pats_tree1, all_genes_tbl, first_clone_is_N = TRUE)
data("ensg_reactome_path_map")
clone_tbl_pat01_tree1 <- clone_tbl_all_pats_all_trees %>%
filter(patient_id == "01") %>%
filter(tree_id == 1) %>%
select(-tree_id)
clone_tbl_pat01_tree1_pw <- convert_ensembl_to_reactome_pw_tbl(clone_tbl_pat01_tree1, ensg_reactome_path_map)
clone_tbl_pat01_tree1_pw
# this tells GeneAccord that both cases should be tested:
# pairs that tend to co-occur together in the same clone more often than expected,
# and pairs that tend to be clonally exclusive.
alternative <- "two.sided"
# to limit the number of tests done, the genes that should be
# tested can be pre-specified
# here, the genes VHL, PXDN
genes_of_interest <- c("ENSG00000134086", "ENSG00000130508")
# this tells GeneAccord that we only want to test pairs where both gene A AND gene B
# are from the 'genes of interest', so we're only testing the pair {VHL, PXDN}
AND_OR <- "AND"
# run GeneAccord with these options
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
AND_OR <- "OR"
# Then, to limit the number of tests performed, it is recommended to only specify a small
# number of genes
# here, only SART3
genes_of_interest <- c("ENSG00000075856")
# run GeneAccord testing all pairs that include the gene SART3
res_pairs_ts <- GeneAccord(clone_tbl_all_pats_all_trees, avg_rates_m, ecdf_list, alternative, genes_of_interest, AND_OR)
res_pairs_ts
devtools::build()
devtools::check()
if(file.exists(sig_pairs_tsv)){
file.remove(sig_pairs_tsv)
}
all_genes_tbl <- create_ensembl_gene_tbl_hg()
devtools::build()
devtools::check()
data("all_genes_tbl")
head(hist_of_num_trees_clon_excl_01[[1]])
devtools::bui;
devtools::build()
devtools::check()
devtools::check()
clone_tbl <- tibble::as_tibble(cbind("file_name" =
rep("fn1", 10),
"patient_id" = rep("pat1", 10),
"altered_entity" = paste0("gene", letters[1:10], collapse = ""),
"clone1" = c(0, 1, 0, 1, 0, 1, 0, 1, 1, 1),
"clone2" = c(1, 0, 1, 0, 1, 1, 1, 0, 0, 1),
"tree_id" = c(rep(1, 5), rep(2, 5))))
compute_rates_clon_excl(pat_tbl)
compute_rates_clon_excl(clone_tbl)
clone_tbl
clone_tbl <- tibble::as_tibble(cbind("file_name" =
rep("fn1", 10),
"patient_id" = rep("pat1", 10),
"altered_entity" = paste0("gene", LETTERS[1:10]),
"clone1" = c(0, 1, 0, 1, 0, 1, 0, 1, 1, 1),
"clone2" = c(1, 0, 1, 0, 1, 1, 1, 0, 0, 1),
"tree_id" = c(rep(1, 5), rep(2, 5))))
clone_tbl
compute_rates_clon_excl(clone_tbl)
devtools::build()
devtools::check()
sessionInfo()
clone_tbl
filter(altered_entity == "geneA", clone_tbl)
filter(clone_tbl, altered_entity == "geneA")
filter(clone_tbl, grepl("1", clone_tbl$tree_id))
getwd()
setwd("U:/Research/github/GeneAccord/")
getwd()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
